
Перем _ИзвестныеМикроархитектуры; // Соответствие

Функция ПолноеОписание(ИнформацияОПроцессоре) Экспорт

	Подстроки = Новый Массив();
	Подстроки.Добавить(КраткоеОписание(ИнформацияОПроцессоре, Истина));

	Если ИнформацияОПроцессоре.КоличествоПроцессоров > 0 Тогда
		Подстроки.Добавить(СтрШаблон(", %1 CPU", ИнформацияОПроцессоре.КоличествоПроцессоров));
	КонецЕсли;

	Если ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров = 1 Тогда
		Подстроки.Добавить(", 1 logical core");
	ИначеЕсли ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров > 1 Тогда
		Подстроки.Добавить(СтрШаблон(", %1 logical cores", ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров));
	КонецЕсли;

	Если ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров > 0 
		И ИнформацияОПроцессоре.КоличествоЯдер > 0 Тогда
		Подстроки.Добавить(" and ");
	ИначеЕсли ИнформацияОПроцессоре.КоличествоЯдер > 0 Тогда
		Подстроки.Добавить(", ");
	КонецЕсли;

	Если ИнформацияОПроцессоре.КоличествоЯдер = 1 Тогда
		Подстроки.Добавить("1 physical core");
	ИначеЕсли ИнформацияОПроцессоре.КоличествоЯдер > 1 Тогда
		Подстроки.Добавить(СтрШаблон("%1 physical cores", ИнформацияОПроцессоре.КоличествоЯдер));
	КонецЕсли;

	Результат = СтрСоединить(Подстроки);

	Если СтрНайти(Результат, "logical cores") И СтрНайти(Результат, "physical cores") Тогда
		Результат = СтрЗаменить(Результат, "logical cores", "logical");
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция КраткоеОписание(ИнформацияОПроцессоре, ВключатьМаксимальнуюЧастоту = Ложь) Экспорт

	ИмяПроцессора = ИнформацияОПроцессоре.ИмяПроцессора;

	Если Не ЗначениеЗаполнено(ИмяПроцессора) Тогда
		Возврат "Unknown processor";
	КонецЕсли;

	ИмяПроцессора = СтрЗаменить(ИмяПроцессора, "@", "");
	ИмяПроцессора = СтрЗаменить(ИмяПроцессора, "(R)", "");
	ИмяПроцессора = СтрЗаменить(ИмяПроцессора, "(TM)", "");

	// Если указано количество ядер, то удаляем в имени упоминание о ядрах
	Если ИнформацияОПроцессоре.КоличествоЯдер > 0 Тогда
		ИмяПроцессора = Новый РегулярноеВыражение("(\w+?-Core Processor)").Заменить(ИмяПроцессора, "");
		ИмяПроцессора = СокрЛП(ИмяПроцессора);
	КонецЕсли;

	Если ВключатьМаксимальнуюЧастоту И ИнформацияОПроцессоре.НоминальнаяЧастота > 0 Тогда

		ФорматнаяСтрокаЧастоты = "ЧДЦ=2; ЧРД=.";
		ЧастотаГГц = КонвертацияЗначенийCpuInfo.ГерцыВГигагерцы(ИнформацияОПроцессоре.НоминальнаяЧастота);
		ПредставлениеЧастоты = Формат(ЧастотаГГц, ФорматнаяСтрокаЧастоты) + "GHz";

		Если СтрНайти(ИмяПроцессора, ПредставлениеЧастоты) = 0 Тогда
			МаксимальнаяЧастота = ?(
				СтрНайти(ИмяПроцессора, "Hz"), 
				СтрШаблон("(Max: %1)", ПредставлениеЧастоты),
				ПредставлениеЧастоты);

			ИмяПроцессора = ИмяПроцессора + " " + Формат(МаксимальнаяЧастота, ФорматнаяСтрокаЧастоты);
		КонецЕсли;

	КонецЕсли;

	ИмяПроцессора = Новый РегулярноеВыражение("\s+").Заменить(ИмяПроцессора, " ");

	Микроархитектура = РаспарситьМикроархитектуру(ИмяПроцессора);
	Если ЗначениеЗаполнено(Микроархитектура) Тогда
		ИмяПроцессора = СтрШаблон("%1 (%2)", ИмяПроцессора, Микроархитектура);
	КонецЕсли;

	Возврат ИмяПроцессора;

КонецФункции

Функция РаспарситьМикроархитектуру(ИмяПроцессора)
	
	ПодстрокаИнтел = "Intel Core";
	Если СтрНачинаетсяС(ИмяПроцессора, ПодстрокаИнтел) Тогда

		Модель = СокрЛП(Сред(ИмяПроцессора, СтрДлина(ПодстрокаИнтел) + 1));
		
		ПервыйСимвол = Лев(Модель, 1);
		ВторойСимвол = Сред(Модель, 2, 1);
		ТретийСимвол = Сред(Модель, 3, 1);

		// Core i3/5/7/9
		Если СтрДлина(Модель) > 4
			И ПервыйСимвол = "i"
			И (ВторойСимвол = "3" Или ВторойСимвол = "5" Или ВторойСимвол = "7" Или ВторойСимвол = "9")
			И (ТретийСимвол = "-" Или ТретийСимвол = " ") Тогда

			НомерМодели = Сред(Модель, 4);
			Если СтрНачинаетсяС(НомерМодели, "CPU") Тогда
				НомерМодели = СокрЛП(Сред(НомерМодели, 4));
			КонецЕсли;

			Индекс = СтрНайти(НомерМодели, "CPU");
			Если Индекс > 0 Тогда
				НомерМодели = СокрЛП(Сред(НомерМодели, 1, Индекс - 1));
			КонецЕсли;
			
			Возврат РаспарситьМикроархитектуруIntelCore(НомерМодели);

		КонецЕсли;

	КонецЕсли;

КонецФункции

Функция РаспарситьМикроархитектуруIntelCore(НомерМодели)
	
	Словарь = ИзвестныеМикроархитектуры();

	Если Не Словарь[НомерМодели] = Неопределено Тогда
		Возврат Словарь[НомерМодели];
	КонецЕсли;

	Длина = СтрДлина(НомерМодели);

	ЧетвертыйСимвол = Сред(НомерМодели, 4, 1);
	Если Длина >= 3 И ТолькоЦифрыВСтроке(Лев(НомерМодели, 3))
		И (Длина = 3 Или Не ТолькоЦифрыВСтроке(ЧетвертыйСимвол)) Тогда
		Возврат "Nehalem";
	КонецЕсли;

	Если Длина >= 4 И ТолькоЦифрыВСтроке(Лев(НомерМодели, 4)) Тогда
		Поколение = Лев(НомерМодели, 1);

		Если Поколение = "2" Тогда
			Возврат "Sandy Bridge";
		ИначеЕсли Поколение = "3" Тогда
			Возврат "Ivy Bridge";
		ИначеЕсли Поколение = "4" Тогда
			Возврат "Haswell";
		ИначеЕсли Поколение = "5" Тогда
			Возврат "Broadwell";
		ИначеЕсли Поколение = "6" Тогда
			Возврат "Skylake";
		ИначеЕсли Поколение = "7" Тогда
			Возврат "Kaby Lake";
		ИначеЕсли Поколение = "8" Тогда
			Возврат "Coffee Lake";
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ИзвестныеМикроархитектуры()

	Если Не _ИзвестныеМикроархитектуры = Неопределено Тогда
		Возврат _ИзвестныеМикроархитектуры;
	КонецЕсли;

	ПутьКФайлу = ОбъединитьПути(ТекущийСценарий().Каталог, "../../Ресурсы", "microarchitectures.txt");

	Словарь = Новый Соответствие();
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу);
	
	ТекущаяМикроархитектура = "";

	Пока Истина Цикл

		Строка = ЧтениеТекста.ПрочитатьСтроку();
		Если Строка = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Строка) Или СтрНачинаетсяС(Строка, "//") Тогда
			Продолжить;
		КонецЕсли;

		Если СтрНачинаетсяС(Строка, "#") Тогда
			ТекущаяМикроархитектура = СокрЛП(Сред(Строка, 2));
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ТекущаяМикроархитектура) Тогда
			Продолжить;
		КонецЕсли;

		НомерМодели = СокрЛП(Строка);
		Словарь[НомерМодели] = ТекущаяМикроархитектура;

	КонецЦикла;

	ЧтениеТекста.Закрыть();

	_ИзвестныеМикроархитектуры = Словарь;

	Возврат Словарь;
	
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач Значение)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции