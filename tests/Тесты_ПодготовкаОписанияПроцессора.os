#Использовать "helpers"

&Тест
Процедура ТестПолногоОписания() Экспорт
	
	Результаты = Новый Массив();
	Для Каждого ИмяПроцессора Из СтрРазделить(",Intel", ",") Цикл
		Для КоличествоПроцессоров = 0 По 2 Цикл
			Для КоличествоЯдер = 0 По 2 Цикл
				Для КоличествоЛогическихПроцессоров = 0 По 2 Цикл
					ИнформацияОПроцессоре = Новый ИнформацияОПроцессоре(Ложь);
					ИнформацияОПроцессоре.ИмяПроцессора = ИмяПроцессора;
					ИнформацияОПроцессоре.КоличествоПроцессоров = КоличествоПроцессоров;
					ИнформацияОПроцессоре.КоличествоЯдер = КоличествоЯдер;
					ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров = КоличествоЛогическихПроцессоров;

					Результаты.Добавить(ИнформацияОПроцессоре.ПолноеОписание());
				КонецЦикла;		
			КонецЦикла;		
		КонецЦикла;
	КонецЦикла;

	ПроверяемоеЗначение = СтрСоединить(Результаты, Символы.ПС);
	ОжидаемоеЗначение = ТестированиеИнформацииОПроцессоре.ПрочитатьФайл("ПолныеОписанияПроцессоров.txt");

	Ожидаем.Что(СтрЧислоСтрок(ПроверяемоеЗначение)).Равно(СтрЧислоСтрок(ОжидаемоеЗначение));

КонецПроцедуры

&Тест
Процедура IntelCore() Экспорт

	ТестовыеСлучаи = Новый Соответствие();
	ТестовыеСлучаи.Вставить("Intel(R) Pentium(TM) G4560 CPU @ 3.50GHz", "Intel Pentium G4560 CPU 3.50GHz");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7 CPU 970 @ 3.20GHz", "Intel Core i7 CPU 970 3.20GHz (Nehalem)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-920 CPU @ 2.67GHz", "Intel Core i7-920 CPU 2.67GHz (Nehalem)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-2600 CPU @ 3.40GHz", "Intel Core i7-2600 CPU 3.40GHz (Sandy Bridge)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz", "Intel Core i7-3770 CPU 3.40GHz (Ivy Bridge)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz", "Intel Core i7-4770K CPU 3.50GHz (Haswell)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-5775R CPU @ 3.30GHz", "Intel Core i7-5775R CPU 3.30GHz (Broadwell)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz", "Intel Core i7-6700HQ CPU 2.60GHz (Skylake)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz", "Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz", "Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R)");
	ТестовыеСлучаи.Вставить("Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz", "Intel Core i7-8700K CPU 3.70GHz (Coffee Lake)");

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		ИнформацияОПроцессоре = Новый ИнформацияОПроцессоре(Ложь);
		ИнформацияОПроцессоре.ИмяПроцессора = ТестовыйСлучай.Ключ;

		Ожидаем.Что(ИнформацияОПроцессоре.КраткоеОписание()).Равно(ТестовыйСлучай.Значение);

	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура IntelСРазнымиЧастотами() Экспорт

	ТестовыеСлучаи = Новый Массив();
	ТестовыеСлучаи.Добавить(ТестовыйСлучайСНоминальнойЧастотой(
		"Intel(R) Pentium(TM) G4560 CPU @ 3.50GHz", "Intel Pentium G4560 CPU 3.50GHz (Max: 3.70GHz)", 3.7));
	ТестовыеСлучаи.Добавить(ТестовыйСлучайСНоминальнойЧастотой(
		"Intel(R) Core(TM) i5-2500 CPU @ 3.30GHz", "Intel Core i5-2500 CPU 3.30GHz (Max: 3.70GHz) (Sandy Bridge)", 3.7));
	ТестовыеСлучаи.Добавить(ТестовыйСлучайСНоминальнойЧастотой(
		"Intel(R) Core(TM) i7-2600 CPU @ 3.40GHz", "Intel Core i7-2600 CPU 3.40GHz (Max: 3.70GHz) (Sandy Bridge)", 3.7));
	ТестовыеСлучаи.Добавить(ТестовыйСлучайСНоминальнойЧастотой(
		"Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz", "Intel Core i7-3770 CPU 3.40GHz (Max: 3.50GHz) (Ivy Bridge)", 3.5));
	ТестовыеСлучаи.Добавить(ТестовыйСлучайСНоминальнойЧастотой(
		"Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz", "Intel Core i7-4770K CPU 3.50GHz (Max: 3.60GHz) (Haswell)", 3.6));
	ТестовыеСлучаи.Добавить(ТестовыйСлучайСНоминальнойЧастотой(
		"Intel(R) Core(TM) i7-5775R CPU @ 3.30GHz", "Intel Core i7-5775R CPU 3.30GHz (Max: 3.40GHz) (Broadwell)", 3.4));

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		НоминальнаяЧастота = КонвертацияЗначенийCpuInfo.ГигагерцыВГерцы(ТестовыйСлучай.НоминальнаяЧастота);

		ИнформацияОПроцессоре = Новый ИнформацияОПроцессоре(Ложь);
		ИнформацияОПроцессоре.ИмяПроцессора = ТестовыйСлучай.ИмяПроцессора;
		ИнформацияОПроцессоре.НоминальнаяЧастота = НоминальнаяЧастота;

		Ожидаем.Что(ИнформацияОПроцессоре.ПолноеОписание()).Равно(ТестовыйСлучай.ОжидаемоеЗначение);

	КонецЦикла;
	
КонецПроцедуры

&Тест
Процедура Amd() Экспорт

	ТестовыеСлучаи = Новый Массив();
	ТестовыеСлучаи.Добавить(ТестовыйСлучайAmd(
		"AMD Ryzen 7 2700X Eight-Core Processor", "AMD Ryzen 7 2700X 4.10GHz", 4.1, 8, 16));
	ТестовыеСлучаи.Добавить(ТестовыйСлучайAmd(
		"AMD Ryzen 7 2700X Eight-Core Processor", "AMD Ryzen 7 2700X Eight-Core Processor 4.10GHz", 4.1, 0, 0));

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		НоминальнаяЧастота = КонвертацияЗначенийCpuInfo.ГигагерцыВГерцы(ТестовыйСлучай.НоминальнаяЧастота);

		ИнформацияОПроцессоре = Новый ИнформацияОПроцессоре(Ложь);
		ИнформацияОПроцессоре.ИмяПроцессора = ТестовыйСлучай.ИмяПроцессора;
		ИнформацияОПроцессоре.НоминальнаяЧастота = НоминальнаяЧастота;
		ИнформацияОПроцессоре.КоличествоЯдер = ТестовыйСлучай.КоличествоЯдер;
		ИнформацияОПроцессоре.КоличествоЛогическихПроцессоров = ТестовыйСлучай.КоличествоЛогическихПроцессоров;

		Ожидаем
			.Что(ПодготовкаОписанияПроцессора.КраткоеОписание(ИнформацияОПроцессоре, Истина))
			.Равно(ТестовыйСлучай.ОжидаемоеЗначение);

	КонецЦикла;
	
КонецПроцедуры

Функция ТестовыйСлучайСНоминальнойЧастотой(ИмяПроцессора, ОжидаемоеЗначение, НоминальнаяЧастота)
	
	ТестовыйСлучай = Новый Структура();
	ТестовыйСлучай.Вставить("ИмяПроцессора", ИмяПроцессора);
	ТестовыйСлучай.Вставить("ОжидаемоеЗначение", ОжидаемоеЗначение);
	ТестовыйСлучай.Вставить("НоминальнаяЧастота", НоминальнаяЧастота);

	Возврат ТестовыйСлучай;

КонецФункции

Функция ТестовыйСлучайAmd(ИмяПроцессора, ОжидаемоеЗначение, НоминальнаяЧастота, КоличествоЯдер, КоличествоЛогическихПроцессоров)
	
	ТестовыйСлучай = Новый Структура();
	ТестовыйСлучай.Вставить("ИмяПроцессора", ИмяПроцессора);
	ТестовыйСлучай.Вставить("ОжидаемоеЗначение", ОжидаемоеЗначение);
	ТестовыйСлучай.Вставить("НоминальнаяЧастота", НоминальнаяЧастота);
	ТестовыйСлучай.Вставить("КоличествоЯдер", КоличествоЯдер);
	ТестовыйСлучай.Вставить("КоличествоЛогическихПроцессоров", КоличествоЛогическихПроцессоров);

	Возврат ТестовыйСлучай;

КонецФункции